References
Pointers to commits

Types of References
Tags and annotated tags
Branches
HEAD

Branch
A Pointer to a particular commit
The pointer of the current branch changes as new commits are made

HEAD
How git knows what branch you are currently on, and what the next parent will be
It's a pointer 
    Points to the name of the current branch
    But can also point to a commit too(detached head)
It moves when
    You make a commit in the currently active branch
    You checkout a new branch

Tags
lightweight tags
A simple pointer to commits
When you create a tag with no arguments, It captures the value in the head

Annotated Tags - Git tag -a
Point to a commit but store additional information
 -Author, message, date 


Working with tags

git tag -a v1.0 -m 'Version 1 of my blog' - Creates a tag
git show v1.0 - gives the info e.g msg, author etc
git tag - list tags(lightweight and annotated)
git show-ref --tags - List all tags and the commit they point to
git tag --points-at <commit> - show all tags pointing at a commit
git show <tag-name> - Looking at the tag, or tagged contents

Tags && Branches
----------------
Branch - Branch pointer moves with every commit to the repository
Tag - The commit a tag points to doesn't change
    - Its a snapshot

Headless / Detached Head
----------------------------
You may need to checkout a specific commit/ tag instead of a branch
git moves the head pointer to that branch
checking out to different branches or commits changes the value of the head to the new SHA 
No reference to the commits made in the detached state

To save your work:
Create a new branch that points to the last commit you made in a detached state
 git branch <new-branch-name> <commit>
Why the last commit
 Because other commits point to their parents



