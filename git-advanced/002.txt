 echo 'Hello World!' > sample/hello.txt
 Creates a file hello.txt with hello world as content

 git add hello.txt
 Adds file to staging area

 Git commit -m "a message"

 tree .git/objects
 Gives the directory structure of the objects folder

 dirs with two chard contain hashes to commits
 files within them miss the first two characters
 Hashes are hexadecimal - A dir can have a max of 256 subfolders
 sha1 for commits differ
 for blobs sha1 might be the same as long as content is the same
 tree structure also may be the same if filename and content is the same
 commit can be addressed by 1st 5 chars(including blob Hashes)
Unless repo is too large

git cat-file -t 01167 - type

git cat-file -p 01167 - Prints content

Cat .git/HEAD 
Shows where the head currently is (The branch it currently is in)

cat .git/refs/heads/master
Gives the hash 

git --no-pager log --oneline
logs in a single 

cat .git/refs/heads/basics
Commits hash

git branch a_new_branch

tree .git/refs
heads contain the branches

AREAS WHERE CODE LIVES
Working area
Staging area
Repository

Working area
Files in your working area that are not also in your staging are not handled by git
Also called untracked files

Staging Area(AKA Index, Cache)
What files are going to be part of the next commit
The staging area is hoe git knows what will change between the current commit and the next commit

Repository
The files git knows about
Contains all of your commits

STAGING AREA
What changes between current commit and next commit
Tip: a clean staging area isn't empty
Consider baseline staging area as being a copy of latest commit

A look at the Index

git ls-files -s

Shows what is in the staging area

MOVING FILES OUT OF STAGING AREA

Add a file to the next commit
git add <filename>

Delete a file in the next commit
git rm <filename>

Rename a file in the next commit
git mv <file>
